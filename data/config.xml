<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE config PUBLIC "-//FLOOR//DTD config 1.0//EN" "config.dtd">
<config>
	<!-- screen resolution and fullscreen/vsync settings (stereo serves no purpose right now) -->
	<screen width="1024" height="1024" fullscreen="0" vsync="0" dpi="0" stereo="0"/>
	<!--<screen width="1920" height="1080" fullscreen="1" vsync="1" dpi="0" stereo="0"/>-->
	
	<!-- openal audio options:
	 disabled: if true, completely disables openal (doesn't initialize it + can't be used)
	 music: music volume in [0, 1] (0.0 = muted, 1.0 = loudest)
	 sound: sound volume in [0, 1]
	 device: optional audio device name (empty = use the default device)
	-->
	<audio disabled="true" music="1.0" sound="1.0" device=""/>
	
	<!-- logging options (apply to both console and file logging)
	 verbosity: 0 = none, 1 = +error, 2 = +warning, 3 = +debug, 4 = +msg, 5 = +undecorated output
	 append_mode: boolean, if enabled, this will, for each logging operation, open the log file in append mode, write to it and close it again
	 separate_msg_file: boolean, if enabled and verbosity >= 3, this will log msgs into a separate file
	 use_time: boolean, if enabled prints the current time in each log msg (format: [%H:%M:%S.usecs])
	 use_color: boolean, if enabled prints the log type in color (error = red, debug = green, ...)
	 log_filename: relative filename of the log file, relative to the current working directory (default: log.txt)
	 msg_filename: relative filename of the msg log file, only used/created if separate_msg_file = true (default: msg.txt)
	-->
	<logging verbosity="5" append_mode="false" separate_msg_file="false" use_time="true" use_color="true" log_filename="" msg_filename=""/>

	<!-- there should be no need to change these -->
	<input key_repeat="0" ldouble_click="10" mdouble_click="10" rdouble_click="10"/>

	<!-- this will sleep the program for the specified amount of milliseconds after each rendered frame -->
	<sleep time="0"/>

	<!--
	 platform: opencl, cuda, metal or host (NOTE: defaults to opencl if possible and main platform fails to init)
	 gl_sharing: if true, enables opengl sharing (only affects opencl right now)
	 debug: compile code with debug information
	 profiling: compile code with profiling support
	 log_binaries: dumps compiled program binaries (opencl-only right now)
	 keep_temp: keep temporary files that are generated during code compilation
	 keep_binaries: save generated/compiled code to data/cache/
	 use_cache: attempts to use generated/compiled code from data/cache/
	-->
	<compute platform="opencl" gl_sharing="false" debug="false" profiling="false" log_binaries="false" keep_temp="false" keep_binaries="true" use_cache="true" />
	
	<!-- opencl toolchain settings
	 platform: the opencl platform index
	 restricts: if this is set to any of (or a list of) "CPU", "GPU" or "ACCELERATOR", only these type of devices are used
	 compiler: the compute clang binary name (must be in $PATH)
	 llc: the compute llc binary name (must be in $PATH)
	 as: the compute llvm-as binary name (must be in $PATH)
	 dis: the compute llvm-dis binary name (must be in $PATH)
	 libcxx: path to the libc++ include folder
	 clang: path to the clang include folder
	 -->
	<opencl platform="0" restrict="" compiler="compute_clang" llc="compute_llc" as="compute_as" dis="compute_dis" libcxx="/usr/local/include/floor/libcxx/include" clang="/usr/local/include/floor/libcxx/clang" />
	
	<!-- cuda toolchain settings
	 compiler: the compute clang binary name (must be in $PATH)
	 llc: the compute llc binary name (must be in $PATH)
	 as: the compute llvm-as binary name (must be in $PATH)
	 dis: the compute llvm-dis binary name (must be in $PATH)
	 libcxx: path to the libc++ include folder
	 clang: path to the clang include folder
	 force_driver_sm: forces the sm target to sm_xy when compiling/jitting/running ptx code in the driver
	 force_compile_sm: forces the sm target to sm_xy when compiling to ptx
	 -->
	<cuda compiler="compute_clang" llc="compute_llc" as="compute_as" dis="compute_dis" libcxx="/usr/local/include/floor/libcxx/include" clang="/usr/local/include/floor/libcxx/clang" force_driver_sm="" force_compile_sm="" />
	
	<!-- metal toolchain settings
	 compiler: the compute clang binary name (must be in $PATH)
	 llc: the compute llc binary name (must be in $PATH)
	 as: the compute llvm-as binary name (must be in $PATH)
	 dis: the compute llvm-dis binary name (must be in $PATH)
	 libcxx: path to the libc++ include folder
	 clang: path to the clang include folder
	 -->
	<metal compiler="compute_clang" llc="compute_llc" as="compute_as" dis="compute_dis" libcxx="/usr/local/include/floor/libcxx/include" clang="/usr/local/include/floor/libcxx/clang" />
	
	<!-- host toolchain settings
	 compiler: the compute clang binary name (must be in $PATH)
	 llc: the compute llc binary name (must be in $PATH)
	 as: the compute llvm-as binary name (must be in $PATH)
	 dis: the compute llvm-dis binary name (must be in $PATH)
	 libcxx: path to the libc++ include folder
	 clang: path to the clang include folder
	 -->
	<host compiler="compute_clang" llc="compute_llc" as="compute_as" dis="compute_dis" libcxx="/usr/local/include/floor/libcxx/include" clang="/usr/local/include/floor/libcxx/clang" />
</config>
