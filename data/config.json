{
	// screen resolution and settings
	"screen": {
		// (logical) window width
		"width": 1280,
		// (logical) window height
		"height": 720,
		// start in fullscreen?
		"fullscreen": false,
		// enable vsync?
		"vsync": true,
		// if enabled, will create a window/surface using the native device/display resolution
		"hidpi": true,
		// if enabled, use a wide-gamut render target/surface/view for Metal and Vulkan
		"wide_gamut": true,
		// if enabled, use a HDR-supported render target/surface/view for Metal and Vulkan
		"hdr": true,
		// if enabled and HDR is enabled, use a linear extended colorspace instead of a normalized one
		"hdr_linear": false,
		// 0 = auto-detect, other values can be used to override the detected value
		"dpi": 0,
		// ignores width/height/fullscreen fields and uses the native device fullscreen resolution
		// NOTE: applies to iOS only
		"prefer_native_device_resolution": true,
		// VR settings
		"vr": {
			// if enabled, performs rendering on the VR HMD
			"enabled": false,
			// any of: openvr, openxr
			"backend": "openxr",
			// if enabled, performs backend specific validation (in debug mode)
			"validation": false,
			// if enabled, enables tracker support
			"trackers": true,
			// if enabled, enables hand-tracking support
			"hand_tracking": true,
			// if enabled, also renders on the companion window (monitor)
			"companion": true,
			// physical X render resolution (for each eye)
			// NOTE: set to 0 to use the recommended render size
			"width": 0,
			// physical Y render resolution (for each eye)
			// NOTE: set to 0 to use the recommended render size
			"height": 0
		}
	},
	
	// openal audio options
	"audio": {
		// if true, completely disables openal (doesn't initialize it + can't be used)
		"disabled": true,
		// music volume in [0, 1] (0.0 = muted, 1.0 = loudest)
		"music": 1.0,
		// sound volume in [0, 1]
		"sound": 1.0,
		// optional audio device name (empty = use the default device)
		"device": ""
	},
	
	// logging options (apply to both console and file logging)
	"logging": {
		// 0 = none, 1 = +error, 2 = +warning, 3 = +debug, 4 = +msg, 5 = +undecorated output
		"verbosity": 5,
		// if enabled, this will, for each logging operation, open the log file in append mode, write to it and close it again
		"append_mode": false,
		// if enabled and verbosity >= 3, this will log msgs into a separate file
		"separate_msg_file": false,
		// if enabled, prints the current time in each log msg (format: [%H:%M:%S.usecs])
		"use_time": true,
		// if enabled, prints the log type in color (error = red, debug = green, ...)
		"use_color": true,
		// if enabled, performs synchronous logging (flushes after each log call)
		"synchronous": false,
		// if enabled, writes all log messages to the specified or default log file(s)
		"file_logging": true,
		// relative filename of the log file, relative to the current working directory (default: log.txt)
		"log_filename": "",
		// relative filename of the msg log file, only used/created if separate_msg_file = true (default: msg.txt)
		"msg_filename": ""
	},
	
	// general memory settings
	"memory": {
		// heap allocation settings for backends that support it
		"heap": {
			// wanted size for the device private storage mode heap: [0, 1] * available global memory size
			// NOTE: for Metal, this won't allocate anything if memory.metal.shared_only_with_unified_memory is true
			"private_size": 0.25,
			// wanted size for the device shared storage mode heap: [0, 1] * available global memory size
			// NOTE: won't allocate anything if the device doesn't have unified memory that is shared with the CPU
			"shared_size": 0.25
		},
		// Metal specific settings
		"metal": {
			// if enabled and the device has unified memory, only uses the shared storage mode for memory allocations
			"shared_only_with_unified_memory": true
		}
	},

	// general compute/graphics and toolchain settings, and specific backend settings further down
	"toolchain": {
		// opencl, cuda, metal, host or vulkan (NOTE: default backend depends on the OS)
		"backend": "",
		// compile code with debug information
		"debug": false,
		// compile code with profiling support
		"profiling": false,
		// dumps compiled program binaries (opencl-only right now)
		"log_binaries": false,
		// keep temporary files that are generated during code compilation
		"keep_temp": false,
		// save generated/compiled code to data/cache/ (NOTE: not implemented yet)
		"keep_binaries": true,
		// attempts to use generated/compiled code from data/cache/ (NOTE: not implemented yet)
		"use_cache": true,
		// logs used compilation/toolchain commands
		"log_commands": false,
		
		// general toolchain settings
		// NOTE: these values can be overwritten on a per-backend basis by simply putting the key/value entry in the specific backend
		"generic": {
			// toolchain base paths that will be searched for the toolchain binaries + libc++, clang and floor includes
			// NOTE: folder structure must be "<path>/{bin,clang,floor,libcxx}"
			"paths": [
				"/opt/floor/toolchain",
				"/c/msys/opt/floor/toolchain",
				"%ProgramW6432%/floor/toolchain",
				"%ProgramFiles%/floor/toolchain"
			],
			// the toolchain clang binary name
			"compiler": "clang",
			// the toolchain llc binary name
			"llc": "llc",
			// the toolchain llvm-as binary name
			"as": "llvm-as",
			// the toolchain llvm-dis binary name
			"dis": "llvm-dis"
		},
		
		// opencl backend settings
		"opencl": {
			// the opencl platform index
			"platform": 0,
			// run the spir-verifier after compiling a spir binary
			"verify_spir": false,
			// run the spirv-validator after compiling a spir-v binary
			"validate_spirv": false,
			// disables spir-v usage and uses spir instead
			"disable_spirv": false,
			// forces spir-v usage even if the driver doesn't support opencl 2.1 or cl_khr_il_program
			// NOTE: currently necessary for AMD drivers
			"force_spirv": false,
			// puts kernel parameters into constant address space to work around spec issues with struct parameters
			// NOTE: not recommended in general (there are other driver issues that can crop up because of this)
			"spirv_param_workaround": false,
			// if non-empty: only devices with names matching any of the names in this list will be used
			// NOTE: capitalization is ignored, names can be partially matched,
			//       can also use "CPU", "GPU" or "ACCELERATOR" to only match these types of devices
			"whitelist": [],
			
			// NOTE: as mentioned above, toolchain settings can be overwritten here, e.g.:
			// "compiler": "some_other_clang_binary"
			
			// the toolchain spir-v encoder binary name
			"spirv-encoder": "llvm-spirv",
			// the toolchain spir-v assembler binary name
			"spirv-as": "spirv-as",
			// the toolchain spir-v disassembler binary name
			"spirv-dis": "spirv-dis",
			// the toolchain spir-v validator binary name
			"spirv-validator": "spirv-val"
		},
		
		// cuda backend settings
		"cuda": {
			// forces the sm target to sm_xy when compiling/jitting/running ptx code in the driver
			"force_driver_sm": "",
			// forces the sm target to sm_xy when compiling to ptx
			"force_compile_sm": "",
			// forces the ptx version to ptx x.y when emitting ptx (e.g. "50" to get ptx 5.0)
			"force_ptx": "",
			// max amount of registers that may be used by a cuda thread / work-item
			"max_registers": 32,
			// if enabled, this will create a verbose error and info log when jitting ptx code
			"jit_verbose": false,
			// the optimization level that the jit compiler should use (range: 0 - 4)
			"jit_opt_level": 4,
			// try to make use of cuda internal api functionality if possible
			"use_internal_api": true,
			// if non-empty: only devices with names matching any of the names in this list will be used
			// NOTE: capitalization is ignored, names can be partially matched
			"whitelist": []
		},
		
		// metal backend settings
		"metal": {
			// we need a different disassembler, because metallib is a container format
			"metallib_dis": "metallib-dis",
			// forces the compiler to generate code for the specified Metal version, instead of the one supported by the OS
			// 0 = ignore this option, 30 = Metal 3.0, 31 = Metal 3.1, ...
			"force_version": 0,
			// if true, enables software printf in functions
			// NOTE: this does come at a big performance cost and should only be enabled for debugging/development purposes
			"soft_printf": false,
			// if non-empty: only devices with names matching any of the names in this list will be used
			// NOTE: capitalization is ignored, names can be partially matched
			"whitelist": []
		},
		
		// host backend settings
		"host": {
			// run on host CPU device if supported?
			"device": true,
			// max number of logical CPU cores (#hw-threads) that may execute a function (0 = use all available)
			"max_core_count": 0
		},
		
		// vulkan backend settings
		"vulkan": {
			// debug-mode only: if true, enables Vulkan validation layers/handling
			"validation": true,
			// debug-mode only: if true, sets debug labels on various/most Vulkan objects
			// NOTE: setting validation to true also enables this, but this adds the option to do so w/o having validation turned on
			"debug_labels": false,
			// run the spirv-validator after compiling a spir-v binary
			"validate_spirv": false,
			// if true, enables software printf in functions
			// NOTE: this does come at a big performance cost and should only be enabled for debugging/development purposes
			"soft_printf": false,
			// if non-empty: only devices with names matching any of the names in this list will be used
			// NOTE: capitalization is ignored, names can be partially matched
			"whitelist": [],
			// if true, uses vkGetSemaphoreCounterValue spin-loop waiting/polling instead of vkWaitSemaphores
			"sema_wait_polling": true,
			
			// if toolchain.log_binaries is true and this is non-empty, then only functions whose name matches any of the filter strings will be dumped
			// e.g. [ "foo", "bar" ] will only dump functions whose name contains "foo" or "bar"
			"log_binary_filter": [],
			
			// fully enables Aftermath and VK_NV_device_diagnostics_config/VK_NV_device_diagnostic_checkpoints if supported
			// NOTE: this adds overhead, use for debugging purposes only!
			"nvidia_device_diagnostics": false,
			
			// the toolchain spir-v encoder binary name
			"spirv-encoder": "llvm-spirv",
			// the toolchain spir-v assembler binary name
			"spirv-as": "spirv-as",
			// the toolchain spir-v disassembler binary name
			"spirv-dis": "spirv-dis",
			// the toolchain spir-v validator binary name
			"spirv-validator": "spirv-val"
		}
	}
}
